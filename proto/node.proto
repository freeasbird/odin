syntax = "proto3";

package proto;

// cmd: protoc --go_out=plugins=grpc:. node.proto

message Args {
    string name = 1;
    string addr = 2;
}

message Node {
    Attrs attrs = 1;
    Hardware hardware = 2;
}

message Attrs {
    string name = 1; // 节点名
    string addr = 2; // 节点ip
    int64 start = 3; // 开始时间戳
    string hwmd5 = 4; // 硬件md5
    int64 now = 5; // 当前时间
}

message Hardware {
    Host host = 1;
    Product product = 2;
    Board board = 3;
    Bios bios = 4;
    Cpu cpu = 5;
    Mem mem = 6;
    repeated Network networks = 7;
}

message Host {
    string machineid = 1; // 机器ID eg:f0f31005fb5a436d88e3c6cbf54e25aa
    string hypervisor = 2; // 主控 eg:kvm
    string architecture = 3; // 架构 eg:amd64
}

message Product {
    string name = 1; // 产品名 eg:Alibaba Cloud ECS
    string vendor = 2; // 供应商 eg:Alibaba Cloud
    string serial = 3; // 序列号 eg:5cfe47e7-1c9a-449c-afbe-xxxxxxxxx
}

// 主板
message Board {
    string name = 1; // 名称 eg:X10DRi
    string vendor = 2; // 供应商 eg:Supermicro
    string serial = 3; // 序列号 eg:NM177S504844
}


message Bios {
    string vendor = 1; // 供应商 eg:American Megatrends Inc.
}

message Cpu {
    string vendor = 1; // 供应商 eg:GenuineIntel
    string model = 2; // 型号 eg:Intel(R) Xeon(R) CPU E5-2682 v4 @ 2.50GHz
    uint32 speed = 3; // 频率 eg:2500
    uint32 cache = 4; // 缓存 eg:40960
    uint32 cpus = 5; // 个数 eg:2
    uint32 cores = 6; // 物理核心 eg:32
    uint32 threads = 7; // 核心 eg:64
}

message Mem {
    string type = 1; // 内存规格:DDR4
    uint32 speed = 2; // 频率 eg:2400
}

message Network {
    string driver = 1; // 设备类型 eg:virtio_net or igb or e1000
    string macaddress = 2; // mac地址 eg:00:0c:29:3b:26:xx
    uint32 speed = 3; // 速率 eg:1000
}

service Stater {
    rpc Status (Args) returns (Node);
}

// auth server

message Request {
    string app = 1; // 应用名称
    string id = 2; // 应用ID
    int64 date = 3; // 当前时间戳,客户端服务端误差不能超过600s
    string verify = 4; // 该字段是密文,用于校验request的参数,客户端要根据 app,id,date,token(唯一且固定的值)加密生成;eg: {"app":"nlp","date":1571987046,"id":"app01","token":"xxxxxx"} 对此加密
    string umd5 = 5; // response中返回的 data.cipher 解密后的值的md5;在active 步骤中此参数无效,仅在 keepline 与 offline中有效
    int64 lease = 6; // 租约ID 在active 步骤中此参数无效,仅在 keepline 与 offline中有效
}

message Data {
    bytes auth = 1; // 解密后是应用的一些属性;eg:{"attrs":[{"Name":"热词","Key":"hotword","Value":111},{"Name":"类热词","Key":"classword","Value":111}],"time":1571994906931717352}
    int64 lease = 2; // 租约ID
    bytes cipher = 3; // 加密UUID生成的密文。
}

message Response {
    int32 code = 1; // 返回状态码 200 OK;
    Data data = 2;
    string msg = 3; // 错误 或 成功的消息
}

service Authorize {
    rpc Auth (Request) returns (Response); // 认证
    rpc KeepLine (Request) returns (Response); // 保持在线
    rpc OffLine (Request) returns (Response); // 下线
}
